"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
from typing import Any, Dict, List, Union

from asgiref.sync import sync_to_async
from corsheaders.defaults import default_headers
from django.contrib.auth import get_user_model
from supertokens_python import (
    InputAppInfo,
    SupertokensConfig,
    get_all_cors_headers,
    init,
)
from supertokens_python.recipe import emailpassword, session, usermetadata
from supertokens_python.recipe.emailpassword import InputOverrideConfig
from supertokens_python.recipe.emailpassword.interfaces import APIInterface
from supertokens_python.recipe.session.interfaces import RecipeInterface

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$7-3%8(7c!)m(08m&l^e+%@1eu(!&0yh$z(v&g0s*_4)#b&i_='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'supertokens_python',
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'supertokens_python.framework.django.django_middleware.middleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication service config
APP_NAME = "Django Supertokens Example"
API_DOMAIN = "http://localhost:8000"
API_BASE_PATH = "/api/auth"
WEBSITE_DOMAIN = "http://localhost:3000"
WEBSITE_BASE_PATH = "/"
AUTH_SERVICE_URL = "http://localhost:3567"


def emailpassword_apis(original_impl: APIInterface):
    original_impl.disable_sign_up_post = True
    return original_impl


def session_override(original_implementation: RecipeInterface):
    og_create_new_session = original_implementation.create_new_session

    async def get_all_permissions(user_id: str):
        UserModel = get_user_model()

        try:
            user = await UserModel.objects.aget(pk=user_id)
            return await sync_to_async(user.get_all_permissions)()
        except UserModel.DoesNotExist:
            return []

    async def create_new_session(
        request: Any,
        user_id: str,
        access_token_payload: Union[None, Dict[str, Any]],
        session_data: Union[None, Dict[str, Any]],
        user_context: Dict[str, Any],
    ):
        if access_token_payload is None:
            access_token_payload = {}

        permissions = await get_all_permissions(user_id)
        access_token_payload["scope"] = " ".join(permissions) if permissions else ""

        return await og_create_new_session(
            request, user_id, access_token_payload, session_data, user_context
        )

    original_implementation.create_new_session = create_new_session
    return original_implementation


init(
    app_info=InputAppInfo(
        app_name=APP_NAME,
        api_domain=API_DOMAIN,
        api_base_path=API_BASE_PATH,
        website_domain=WEBSITE_DOMAIN,
        website_base_path=WEBSITE_BASE_PATH,
    ),
    supertokens_config=SupertokensConfig(
        connection_uri=AUTH_SERVICE_URL,
    ),
    framework="django",
    recipe_list=[
        session.init(override=session.InputOverrideConfig(functions=session_override)),
        emailpassword.init(override=InputOverrideConfig(apis=emailpassword_apis)),
        usermetadata.init(),
    ],
    mode="wsgi",
)

CORS_ORIGIN_WHITELIST = WEBSITE_DOMAIN
CORS_ALLOWED_ORIGINS = WEBSITE_DOMAIN
CORS_ALLOW_HEADERS: List[str] = (
    list(default_headers) + ["Content-Type"] + get_all_cors_headers()
)
CORS_ALLOW_CREDENTIALS = True

AUTH_USER_MODEL = "api.SupertokensUser"
